plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

apply from: "$rootDir/gradle/additional-artifacts.gradle"
apply from: "$rootDir/gradle/dependencies.gradle"
apply from: "$rootDir/gradle/documentation.gradle"
apply from: "$rootDir/gradle/publishing.gradle"
apply from: "$rootDir/gradle/release.gradle"

repositories {
    gradlePluginPortal()
    mavenCentral()
}

dependencies {
    ext.autoValueVersion = '1.8.2'
    ext.jcloudsVersion = '2.4.0'
    ext.guiceVersion = '5.0.1'
    ext.autoServiceVersion = '1.0'
    ext.guiceVersion = '5.0.1'

    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation ("org.apache.jclouds:jclouds-core:${jcloudsVersion}")
    implementation ("com.google.inject:guice:${guiceVersion}")
    implementation ("com.google.inject.extensions:guice-assistedinject:${guiceVersion}")
    implementation ("com.google.auto.service:auto-service-annotations:${autoServiceVersion}")
    annotationProcessor ("com.google.auto.service:auto-service:${autoServiceVersion}")
    implementation ("com.google.auto.value:auto-value-annotations:${autoValueVersion}")
    annotationProcessor ("com.google.auto.value:auto-value:${autoValueVersion}")

    testImplementation ("org.apache.jclouds:jclouds-core:${jcloudsVersion}:tests")
    testImplementation ("org.apache.jclouds.driver:jclouds-slf4j:${jcloudsVersion}")
    testImplementation ('org.testng:testng:7.4.0')
    testImplementation ('org.assertj:assertj-core:3.20.2')
    testImplementation ('com.squareup.okhttp:mockwebserver:2.7.5')
    testImplementation ('ch.qos.logback:logback-core:1.2.6')
    testImplementation ('ch.qos.logback:logback-classic:1.2.5')
}

ext.compatibilityVersion = '1.8'
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

jar {
    manifest {
        attributes 'Implementation-Title': 'Artifactory REST client',
                   'Implementation-Version': archiveVersion,
                   'Built-By': System.getProperty('user.name'),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version'),
                   'Built-Gradle': gradle.gradleVersion
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:-options"]
}

task mockTest(type: Test) {
    useTestNG()
    include "**/**MockTest.class"
    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed'
    }
}

task integTest(type: Test, dependsOn: ['mockTest']) {
    useTestNG()
    include "**/StorageApiLiveTest.class"
    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed'
    }

    def authentication = [:]
    def possibleAuth = project.findProperty('testArtifactoryRestCredentials')
    if (possibleAuth) {
        authentication['test.artifactory.rest.credentials'] = possibleAuth
    } else {
        possibleAuth = project.findProperty('testArtifactoryRestToken')
        if (possibleAuth) {
            authentication['test.artifactory.rest.token'] = possibleAuth
        } else {
            logger.quiet 'No authentication parameters found. Assuming anonymous...'
        }
    }

    // property 'test.artifactory.endpoint' needs to be
    // hard-coded in for jclouds test framework
    systemProperties = ["test.artifactory.endpoint" : "${testArtifactoryRestEndpoint}",
                        "test.artifactory.docker.repo" : "${testArtifactoryRestDockerRepo}",
                        "test.artifactory.docker.repo.promoted" : "${testArtifactoryRestDockerPromotedRepo}",
                        "test.artifactory.docker.image" : "${testArtifactoryRestDockerImage}",
                        "test.artifactory.docker.tag" : "${testArtifactoryRestDockerTag}"] << authentication
}

